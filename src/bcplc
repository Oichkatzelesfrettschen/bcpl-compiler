#!/bin/sh -e

# A cc-like compiler driver for BCPL
# Copyright (c) 2012 Robert Nordier.  All rights reserved.

error()
{
    echo $@ >&2
    exit 2
}

# Determine runtime location.  If PREFIX is set use it, otherwise try the
# directory containing this script before falling back to /usr/local.
if [ -n "$PREFIX" ]; then
    prefix="$PREFIX"
    d="$prefix/lib/bcplc"
else
    script_dir=$(cd "$(dirname "$0")" && pwd)
    if [ -e "$script_dir/st" ]; then
        d="$script_dir"
    elif [ -e "$script_dir/../lib/bcplc/st" ]; then
        d="$script_dir/../lib/bcplc"
    else
        prefix=/usr/local
        d="$prefix/lib/bcplc"
    fi
fi
# Allow callers to override assembler/linker prefix and runtime bitness
BITS="${BITS:-64}"
AS="${CROSS_PREFIX:-}as"
LD="${CROSS_PREFIX:-}ld"

# Construct paths to BITS-specific runtime object files
ohead="$d/su${BITS}.o"
otail_common="$d/blib.o $d/global.o $d/rt.o" # Assuming these are common for now
osys="$d/sys${BITS}.o"

# Original logic for 16-bit specific names, if they were different from su16.o/sys16.o pattern
# if [ "$BITS" = "16" ]; then
#    ohead="$d/su16.o" # now covered by su${BITS}.o
#    otail="$otail_common $d/sys_ia16.o" # now covered by sys${BITS}.o (sys16.o)
# else
#    ohead="$d/su.o" # now covered by su${BITS}.o (su32.o or su64.o)
#    otail="$otail_common $d/sys.o" # now covered by sys${BITS}.o (sys32.o or sys64.o)
# fi
# Simplified:
otail="$otail_common $osys"


stcmd="$d/st"
Oflag=0
cflag=4
args=`getopt COSco: $*`
set -- $args
for i
do
    case "$i"
    in
        -C)
            cflag=1; shift;;
        -O)
            Oflag=1; shift;;
        -S)
            cflag=2; shift;;
        -c)
            cflag=3; shift;;
        -o)
            oname="$2"; shift; shift;;
        --)
            shift; break;;
    esac
done
if test $# -lt 1; then
    error 'usage: bcplc [-COSc] [-o output] file ...'
fi
rm -f /tmp/$$_tmp.*
for arg in $@
do
    x=`expr "$arg" : '.*[.]\([bOso]\)'` || error "$arg: Unknown type"
    case $x in
    b) i=1 ;;
    O) i=2 ;;
    s) i=3 ;;
    o) i=4 ;;
    esac
    f=`basename $arg .$x`
    if test -z "$oname"; then
        oname=$f
    fi
    if test $i -gt $cflag; then
        error "$arg: Can't process further"
    fi
    ifile=$arg
    while test $i -le 3 -a $i -le $cflag
    do
        case $i in
        1) x=O ;;
        2) x=s ;;
        3) x=o ;;
        esac
        if test $i -eq $cflag -o $i -eq 3; then
            ofile=$f.$x
        else
            ofile=/tmp/$$_tmp.$x
        fi
        case $i in
        1) $stcmd < $ifile > $ofile ;;
        2) if test $Oflag -eq 0; then
               $d/cg < $ifile > $ofile
           else
               $d/cg < $ifile | $d/op > $ofile
           fi ;;
        3) $AS --$BITS --defsym BITS=$BITS -o $ofile $ifile ;;
        esac
        ifile=$ofile
        i=$(($i+1))
    done
    olist="$olist $ifile"
    rm -f /tmp/$$_tmp.*
done
if test $cflag -eq 4; then
    if [ "$BITS" = "64" ]; then
        EM=elf_x86_64
    elif [ "$BITS" = "32" ]; then
        EM=elf_i386
    else
        EM=elf_i386
    fi
    $LD -m $EM -o $oname $ohead $olist $otail
fi
