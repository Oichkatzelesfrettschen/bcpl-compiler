cmake_minimum_required(VERSION 3.20)

# Multi-Architecture BCPL Compiler Build System
project(BCPL 
    VERSION 2025.1.0
    DESCRIPTION "Multi-Architecture BCPL Compiler with C23 Runtime"
    LANGUAGES C ASM
)

# Compiler Requirements - Accept AppleClang and Clang
if(NOT CMAKE_C_COMPILER_ID MATCHES ".*Clang.*")
    message(FATAL_ERROR "Clang is required to build the multi-architecture BCPL compiler")
endif()

# C23 Standard with Enhanced Features
set(CMAKE_C_STANDARD 23)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

# Build Configuration
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# =============================================================================
# MULTI-ARCHITECTURE CONFIGURATION
# =============================================================================

# Use TARGET_ARCH from MultiArch.cmake or detect host
if(NOT DEFINED TARGET_ARCH)
    if(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64|arm64")
        set(TARGET_ARCH "arm64")
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|AMD64|amd64")
        set(TARGET_ARCH "x86_64")
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm")
        set(TARGET_ARCH "arm32")
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "i386|i686|x86")
        set(TARGET_ARCH "x86_32")
    else()
        set(TARGET_ARCH "x86_64")  # Safe default
    endif()
endif()

message(STATUS "Building BCPL for ${TARGET_ARCH} (${BCPL_ARCH_BITS}-bit) on ${CMAKE_SYSTEM_NAME}")

# Platform-specific settings
if(APPLE)
    set(BCPL_PLATFORM "MACOS")
    set(BCPL_PLATFORM_SOURCES platform/macos.c)
    
    # Enable Universal Binary support if requested
    if(DEFINED CMAKE_OSX_ARCHITECTURES)
        message(STATUS "Universal Binary: ${CMAKE_OSX_ARCHITECTURES}")
    elseif(TARGET_ARCH STREQUAL "arm64")
        set(CMAKE_OSX_ARCHITECTURES "arm64")
    elseif(TARGET_ARCH STREQUAL "x86_64")
        set(CMAKE_OSX_ARCHITECTURES "x86_64")
    endif()
    
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(BCPL_PLATFORM "LINUX")
    set(BCPL_PLATFORM_SOURCES platform/linux.c)
elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
    set(BCPL_PLATFORM "FREEBSD")
    set(BCPL_PLATFORM_SOURCES platform/freebsd.c)
else()
    set(BCPL_PLATFORM "GENERIC")
    set(BCPL_PLATFORM_SOURCES platform/generic.c)
endif()

# Include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}
)

# =============================================================================
# COMPILER FLAGS
# =============================================================================

set(BCPL_C_FLAGS
    -std=c23
    -Wall -Wextra -Wpedantic
    ${BCPL_ARCH_FLAGS}
    ${BCPL_ARCH_DEFINES}
    -DBITS=${BCPL_ARCH_BITS}
    -DBCPL_ARCH_BITS=${BCPL_ARCH_BITS}
    -DBCPL_PLATFORM_${BCPL_PLATFORM}=1
    -DBCPL_MODERNIZED=1
    -DBCPL_TARGET_ARCH=\"${TARGET_ARCH}\"
)

# Strict flags for generated code only
set(BCPL_STRICT_FLAGS
    ${BCPL_C_FLAGS}
    -Werror
    -Wconversion -Wsign-conversion
    -Wcast-align -Wcast-qual
    -Wunreachable-code -Wunused
)

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    list(APPEND BCPL_C_FLAGS -g3 -O0 -DDEBUG=1)
else()
    list(APPEND BCPL_C_FLAGS -O2 -g)
endif()

# =============================================================================
# MULTI-ARCHITECTURE RUNTIME LIBRARY
# =============================================================================

set(BCPL_RUNTIME_SOURCES
    runtime/bcpl_runtime.c
    runtime/universal_startup.c
    runtime/memory.c
    runtime/io.c
    runtime/strings.c
    runtime/vectors.c
    runtime/startup.c
    runtime/rt.c
    ${BCPL_PLATFORM_SOURCES}
)

# Add architecture-specific runtime sources
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/arch/${TARGET_ARCH}/runtime_${TARGET_ARCH}.c")
    list(APPEND BCPL_RUNTIME_SOURCES "arch/${TARGET_ARCH}/runtime_${TARGET_ARCH}.c")
    message(STATUS "Added architecture-specific runtime: arch/${TARGET_ARCH}/runtime_${TARGET_ARCH}.c")
endif()

# Create the multi-architecture runtime library with strict warnings
add_library(bcpl_runtime STATIC ${BCPL_RUNTIME_SOURCES})
target_compile_options(bcpl_runtime PRIVATE ${BCPL_STRICT_FLAGS})
apply_tooling_flags(bcpl_runtime)

# Set architecture-specific properties
set_target_properties(bcpl_runtime PROPERTIES
    OUTPUT_NAME "bcpl_runtime_${TARGET_ARCH}"
)

# =============================================================================
# MULTI-ARCHITECTURE COMPILER BACKEND TOOLS
# =============================================================================

# Code Generator with architecture-specific optimizations
add_executable(cg cg.c oc.c)
target_compile_options(cg PRIVATE ${BCPL_STRICT_FLAGS})
target_link_libraries(cg PRIVATE bcpl_runtime)
apply_tooling_flags(cg)
set_target_properties(cg PROPERTIES OUTPUT_NAME "cg_${TARGET_ARCH}")

# Optimizer with architecture-specific optimizations
add_executable(op op.c pt.c)
target_compile_options(op PRIVATE ${BCPL_STRICT_FLAGS})
target_link_libraries(op PRIVATE bcpl_runtime)
apply_tooling_flags(op)
set_target_properties(op PROPERTIES OUTPUT_NAME "op_${TARGET_ARCH}")

# =============================================================================
# MULTI-ARCHITECTURE BCPL COMPILER FRONT-END (st) - C TRANSLATION APPROACH
# =============================================================================

# Use C translation of OCODE for platform independence
message(STATUS "Building BCPL compiler front-end with OCODE-to-C translation for ${TARGET_ARCH}")

# Generate C code from OCODE using the working translator
add_custom_command(
    OUTPUT st_from_ocode_${TARGET_ARCH}.c
    COMMAND ${CMAKE_SOURCE_DIR}/scripts/ocode_to_c_enhanced.py ${CMAKE_CURRENT_SOURCE_DIR}/st.O st_from_ocode_${TARGET_ARCH}.c
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/st.O ${CMAKE_SOURCE_DIR}/scripts/ocode_to_c_enhanced.py
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Translating BCPL OCODE to C for ${TARGET_ARCH}"
    VERBATIM
)

# Create the st executable from translated C code
add_executable(st st_from_ocode_${TARGET_ARCH}.c)
target_compile_options(st PRIVATE 
    ${BCPL_STRICT_FLAGS}
    -Wno-unused-label
    -Wno-unused-function
    -Wno-unused-variable
    -Wno-unreachable-code
)
target_link_libraries(st PRIVATE bcpl_runtime)
apply_tooling_flags(st)
set_target_properties(st PROPERTIES OUTPUT_NAME "st_${TARGET_ARCH}")

# Create a target that other targets can depend on
add_custom_target(st_executable ALL DEPENDS st)

# =============================================================================
# ENHANCED LLVM BACKEND
# =============================================================================

find_package(LLVM QUIET CONFIG)
if(LLVM_FOUND)
    message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION} for ${TARGET_ARCH}")
    
    include_directories(${LLVM_INCLUDE_DIRS})
    separate_arguments(LLVM_DEFINITIONS_LIST UNIX_COMMAND "${LLVM_DEFINITIONS}")
    add_definitions(${LLVM_DEFINITIONS_LIST})
    
    llvm_map_components_to_libnames(LLCG_LIBS
        core bitwriter native analysis target
    )
    
    add_executable(llcg llcg.cpp)
    target_compile_options(llcg PRIVATE ${BCPL_CXX_FLAGS})
    target_link_libraries(llcg PRIVATE ${LLCG_LIBS} bcpl_runtime)
    apply_tooling_flags(llcg)
    set_target_properties(llcg PROPERTIES OUTPUT_NAME "llcg_${TARGET_ARCH}")
    set(LLVM_AVAILABLE ON)
else()
    set(LLVM_AVAILABLE OFF)
endif()

# =============================================================================
# MULTI-ARCHITECTURE BUILD SCRIPTS
# =============================================================================

# Generate architecture-specific build script
configure_file(
    "${CMAKE_SOURCE_DIR}/scripts/build_arch.sh.in"
    "${CMAKE_BINARY_DIR}/build_${TARGET_ARCH}.sh"
    @ONLY
)

# Make script executable
execute_process(
    COMMAND chmod +x "${CMAKE_BINARY_DIR}/build_${TARGET_ARCH}.sh"
)

# =============================================================================
# INSTALLATION
# =============================================================================

install(TARGETS cg op bcpl_runtime
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
)

if(LLVM_AVAILABLE)
    install(TARGETS llcg RUNTIME DESTINATION bin)
endif()

# Install the BCPL compiler components with architecture suffix
install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/st_${TARGET_ARCH} DESTINATION bin)

# Install architecture-neutral wrapper script as bcplc
install(PROGRAMS bcplc DESTINATION bin)

install(DIRECTORY include/ DESTINATION include/bcpl)

# Install architecture-specific headers
install(FILES 
    arch/${TARGET_ARCH}/runtime_${TARGET_ARCH}.c
    DESTINATION include/bcpl/arch/${TARGET_ARCH}
    OPTIONAL
)

# =============================================================================
# SUMMARY
# =============================================================================

message(STATUS "=== Multi-Architecture BCPL Compiler Build Configuration ===")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Platform: ${BCPL_PLATFORM}")
message(STATUS "Target Architecture: ${TARGET_ARCH} (${BCPL_ARCH_BITS}-bit)")
message(STATUS "C Compiler: ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER_VERSION}")
message(STATUS "LLVM Backend: ${LLVM_AVAILABLE}")
message(STATUS "Runtime: Pure C23 implementation with arch-specific optimizations")
if(DEFINED CMAKE_OSX_ARCHITECTURES)
    message(STATUS "Universal Binary: ${CMAKE_OSX_ARCHITECTURES}")
endif()
message(STATUS "Generated binaries will have '${TARGET_ARCH}' suffix")
message(STATUS "==============================================================")
