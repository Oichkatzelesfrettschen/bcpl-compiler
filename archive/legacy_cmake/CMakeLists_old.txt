cmake_minimum_required(VERSION 3.20)

# Modern BCPL Compiler Build System
project(BCPL 
    VERSION 2025.1.0
    DESCRIPTION "Modernized BCPL Compiler with C23 Runtime"
    LANGUAGES C CXX ASM
)

# Compiler Requirements
if(NOT CMAKE_C_COMPILER_ID MATCHES ".*Clang.*")
    message(FATAL_ERROR "Clang is required to build the modernized BCPL compiler")
endif()

# C23 Standard with Enhanced Features
set(CMAKE_C_STANDARD 23)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

# Build Configuration
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_VERBOSE_MAKEFILE OFF)

# Platform Detection and Configuration
include(CheckIncludeFile)
include(CheckFunctionExists)
include(CheckCSourceCompiles)

# =============================================================================
# MODERNIZED BCPL ARCHITECTURE CONFIGURATION
# =============================================================================

# Architecture and bitness detection
if(NOT DEFINED BITS)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(BITS 64)
    elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
        set(BITS 32)
    else()
        set(BITS 16)
    endif()
endif()

message(STATUS "Building BCPL for ${BITS}-bit architecture")
message(STATUS "Target platform: ${CMAKE_SYSTEM_NAME}")
message(STATUS "Target processor: ${CMAKE_SYSTEM_PROCESSOR}")

# Platform-specific settings
if(APPLE)
    set(BCPL_PLATFORM "MACOS")
    set(BCPL_PLATFORM_SOURCES platform/macos.c)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(BCPL_PLATFORM "LINUX")
    set(BCPL_PLATFORM_SOURCES platform/linux.c)
elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
    set(BCPL_PLATFORM "FREEBSD")
    set(BCPL_PLATFORM_SOURCES platform/freebsd.c)
else()
    set(BCPL_PLATFORM "GENERIC")
    set(BCPL_PLATFORM_SOURCES platform/generic.c)
endif()

# Include directories for modern headers
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}
)

# =============================================================================
# COMPILER FLAGS AND OPTIMIZATIONS
# =============================================================================

# Base C23 flags
set(BCPL_C_FLAGS
    -std=c23
    -Wall -Wextra -Wpedantic
    -Wformat=2 -Wformat-security
    -Wnull-dereference -Wstack-protector
    -Wstrict-overflow=3 -Walloca
    -DBITS=${BITS}
    -DBCPL_PLATFORM_${BCPL_PLATFORM}=1
)

# Debug/Release configurations
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    list(APPEND BCPL_C_FLAGS -g3 -O0 -DDEBUG=1 -fsanitize=address,undefined)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address,undefined")
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    list(APPEND BCPL_C_FLAGS -O3 -DNDEBUG -flto -march=native)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto")
else()
    list(APPEND BCPL_C_FLAGS -O2 -g)
endif()

# Platform-specific optimizations
if(APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
    list(APPEND BCPL_C_FLAGS -mcpu=apple-m1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
    list(APPEND BCPL_C_FLAGS -msse4.2 -mavx)
endif()

# =============================================================================
# MODERNIZED BCPL RUNTIME LIBRARY
# =============================================================================

# Core modernized runtime sources
set(BCPL_RUNTIME_SOURCES
    runtime/bcpl_runtime.c
    runtime/memory.c
    runtime/io.c
    runtime/strings.c
    runtime/vectors.c
    ${BCPL_PLATFORM_SOURCES}
)

# Check if runtime sources exist, create stubs if needed
foreach(src ${BCPL_RUNTIME_SOURCES})
    if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${src}")
        message(STATUS "Creating stub for missing source: ${src}")
    endif()
endforeach()

# Modern BCPL Runtime Library
add_library(bcpl_runtime STATIC ${BCPL_RUNTIME_SOURCES})
target_compile_options(bcpl_runtime PRIVATE ${BCPL_C_FLAGS})
target_include_directories(bcpl_runtime 
    PUBLIC 
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
)

# =============================================================================
# COMPILER BACKEND TOOLS (MODERNIZED)
# =============================================================================

# Code Generator (enhanced with runtime integration)
add_executable(cg cg.c oc.c)
target_compile_options(cg PRIVATE ${BCPL_C_FLAGS})
target_link_libraries(cg PRIVATE bcpl_runtime)

# Optimizer (enhanced with runtime integration)  
add_executable(op op.c pt.c)
target_compile_options(op PRIVATE ${BCPL_C_FLAGS})
target_link_libraries(op PRIVATE bcpl_runtime)

# Enhanced LLVM integration with modern features
find_package(LLVM QUIET CONFIG)
if(LLVM_FOUND)
    message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
    message(STATUS "LLVM installation directory: ${LLVM_INSTALL_PREFIX}")
    
    # LLVM configuration
    include_directories(${LLVM_INCLUDE_DIRS})
    separate_arguments(LLVM_DEFINITIONS_LIST UNIX_COMMAND "${LLVM_DEFINITIONS}")
    add_definitions(${LLVM_DEFINITIONS_LIST})
    
    # Map LLVM components to libraries with enhanced features
    llvm_map_components_to_libnames(LLCG_LIBS
        core bitwriter native analysis target
        transformutils scalaropts codegen
    )
    
    # Enhanced LLVM Code Generator
    add_executable(llcg llcg.c)
    target_compile_options(llcg PRIVATE ${BCPL_C_FLAGS})
    target_link_libraries(llcg PRIVATE ${LLCG_LIBS} bcpl_runtime)
    target_compile_definitions(llcg PRIVATE BCPL_LLVM_ENABLED=1)
    
    set(LLVM_AVAILABLE TRUE)
else()
    message(STATUS "LLVM not found - building without LLVM backend")
    set(LLVM_AVAILABLE FALSE)
endif()

# Assemble the runtime
if(BITS STREQUAL "64")
    set(AS_FLAGS "--64" "--defsym" "BITS=64")
    set(LD_MODE "elf_x86_64")
elseif(BITS STREQUAL "32")
    set(AS_FLAGS "--32" "--defsym" "BITS=32")
    set(LD_MODE "elf_i386")
elseif(BITS STREQUAL "16")
    set(AS_FLAGS "--16" "--defsym" "BITS=16")
    set(LD_MODE "elf_i386")
else()
    message(FATAL_ERROR "Unsupported BITS value: ${BITS}")
endif()

set(AS "${CROSS_PREFIX}as")
set(LD "${CROSS_PREFIX}ld")
set(BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR})
set(SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR})

function(add_asm_object out src)
    add_custom_command(
        OUTPUT ${out}
        COMMAND ${AS} ${AS_FLAGS} -o ${out} ${src}
        DEPENDS ${src}
        WORKING_DIRECTORY ${BUILD_DIR}
        VERBATIM)
endfunction()

if(BITS STREQUAL "16")
    set(SU_SRC ${SRC_DIR}/su16.s)
    set(SYS_SRC ${SRC_DIR}/sys_ia16.s)
else()
    set(SU_SRC ${SRC_DIR}/su.s)
    set(SYS_SRC ${SRC_DIR}/sys.s)
endif()

add_asm_object(${BUILD_DIR}/su.o ${SU_SRC})
set(BLIB_SRC ${SRC_DIR}/blib.s)
if(BOOTSTRAP)
    add_custom_command(
        OUTPUT ${BUILD_DIR}/blib.s
        COMMAND bash -c "$<TARGET_FILE:cg> < ${SRC_DIR}/blib.O | $<TARGET_FILE:op> > blib.s"
        WORKING_DIRECTORY ${BUILD_DIR}
        DEPENDS cg op ${SRC_DIR}/blib.O
        VERBATIM)
    set(BLIB_SRC ${BUILD_DIR}/blib.s)
endif()
add_asm_object(${BUILD_DIR}/blib.o ${BLIB_SRC})
add_asm_object(${BUILD_DIR}/global.o ${SRC_DIR}/global.s)
add_asm_object(${BUILD_DIR}/rt.o ${SRC_DIR}/rt.s)
add_asm_object(${BUILD_DIR}/sys.o ${SYS_SRC})

set(ST_SRC ${SRC_DIR}/st.s)
if(BOOTSTRAP)
    add_custom_command(
        OUTPUT ${BUILD_DIR}/st.s
        COMMAND bash -c "$<TARGET_FILE:cg> < ${SRC_DIR}/st.O | $<TARGET_FILE:op> > st.s"
        WORKING_DIRECTORY ${BUILD_DIR}
        DEPENDS cg op ${SRC_DIR}/st.O
        VERBATIM)
    set(ST_SRC ${BUILD_DIR}/st.s)
endif()

add_custom_command(
    OUTPUT ${BUILD_DIR}/st.o
    COMMAND ${AS} ${AS_FLAGS} -o st.o ${ST_SRC}
    DEPENDS ${ST_SRC}
    WORKING_DIRECTORY ${BUILD_DIR}
    VERBATIM)

set(RUNTIME_OBJS
    ${BUILD_DIR}/su.o
    ${BUILD_DIR}/st.o
    ${BUILD_DIR}/blib.o
    ${BUILD_DIR}/global.o
    ${BUILD_DIR}/rt.o
    ${BUILD_DIR}/sys.o)

add_custom_command(
    OUTPUT ${BUILD_DIR}/st
    COMMAND ${LD} -m ${LD_MODE} -o st ${RUNTIME_OBJS}
    DEPENDS ${RUNTIME_OBJS}
    WORKING_DIRECTORY ${BUILD_DIR}
    VERBATIM)

add_custom_target(runtime ALL DEPENDS ${BUILD_DIR}/st)

# Installation
install(TARGETS cg op RUNTIME DESTINATION lib/bcplc)
if(TARGET llcg)
    install(TARGETS llcg RUNTIME DESTINATION lib/bcplc)
endif()
install(PROGRAMS ${BUILD_DIR}/st DESTINATION lib/bcplc)
install(PROGRAMS bcplc DESTINATION bin)
install(FILES bcplc.1 DESTINATION share/man/man1)
install(FILES LIBHDR DESTINATION lib/bcplc)
install(FILES ${BUILD_DIR}/su.o ${BUILD_DIR}/blib.o ${BUILD_DIR}/global.o
              ${BUILD_DIR}/rt.o ${BUILD_DIR}/sys.o
        DESTINATION lib/bcplc)

# =============================================================================
# MODERNIZED TRANSPILER AND TOOLS
# =============================================================================

# Create stub files for missing modern components
file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/runtime)
file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/transpiler)
file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests)

# Check and create missing runtime source files
foreach(stub_file runtime/bcpl_runtime.c runtime/memory.c runtime/io.c runtime/strings.c runtime/vectors.c)
    if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${stub_file}")
        file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/${stub_file}" 
"// Auto-generated stub for ${stub_file}
#include \"../include/bcpl_runtime.h\"
// Implementation will be added during modernization
")
    endif()
endforeach()

# Create platform stub if needed
if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${BCPL_PLATFORM_SOURCES}")
    get_filename_component(platform_dir ${BCPL_PLATFORM_SOURCES} DIRECTORY)
    file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${platform_dir})
    file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/${BCPL_PLATFORM_SOURCES}"
"// Auto-generated platform stub for ${BCPL_PLATFORM}
#include \"../include/platform.h\"
// Platform-specific implementation will be added
")
endif()

# =============================================================================
# ENHANCED LLVM BACKEND
# =============================================================================
