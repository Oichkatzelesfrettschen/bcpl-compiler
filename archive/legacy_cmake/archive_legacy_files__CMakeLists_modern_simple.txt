# CMakeLists.txt for Modern BCPL Code Generator
# Comprehensive build system for the modernized architecture

cmake_minimum_required(VERSION 3.20)
project(bcpl_modern_compiler 
    VERSION 1.0.0
    DESCRIPTION "Modern C23 BCPL Compiler"
    LANGUAGES C CXX
)

# =============================================================================
# BUILD CONFIGURATION
# =============================================================================

# Set C23 standard
set(CMAKE_C_STANDARD 23)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

# Set C++23 standard for mixed C/C++ compilation
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Build types
set(CMAKE_CONFIGURATION_TYPES "Debug;Release;RelWithDebInfo;MinSizeRel" CACHE STRING "" FORCE)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING 
        "Choose the type of build: Debug Release RelWithDebInfo MinSizeRel" FORCE)
endif()

# =============================================================================
# COMPILER OPTIONS AND FEATURES
# =============================================================================

# Modern compiler flags
set(MODERN_C_FLAGS
    -Wall
    -Wextra
    -Wpedantic
    -Wformat=2
    -Wcast-align
    -Wcast-qual
    -Wstrict-aliasing
    -Wmissing-prototypes
    -Wstrict-prototypes
    -Wold-style-definition
    -Wmissing-declarations
    -Wredundant-decls
    -Wshadow
    -Wunused
    -Wuninitialized
    -Wundef
    -Wwrite-strings
    -Wpointer-arith
    -Wbad-function-cast
    -Wnested-externs
    -Wconversion
    -Wsign-conversion
    -Wfloat-equal
    -Wlogical-op
    -Wjump-misses-init
    -Wduplicated-cond
    -Wduplicated-branches
    -Wnull-dereference
    -Wdouble-promotion
    -Wformat-security
    -Wstack-protector
    -Wvla
)

# Architecture-specific optimizations
if(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|AMD64")
    list(APPEND MODERN_C_FLAGS -march=native -mtune=native)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64|arm64")
    list(APPEND MODERN_C_FLAGS -march=native -mcpu=native)
endif()

# Security hardening flags
set(SECURITY_FLAGS
    -fstack-protector-strong
    -fPIE
    -D_FORTIFY_SOURCE=2
    -Wformat
    -Wformat-security
)

# Debug flags
set(DEBUG_FLAGS
    -g3
    -ggdb
    -fno-omit-frame-pointer
    -fno-optimize-sibling-calls
    -DDEBUG_CODE_GENERATION
    -DENABLE_MEMORY_SAFETY
)

# Release flags
set(RELEASE_FLAGS
    -O3
    -DNDEBUG
    -flto
    -ffast-math
    -funroll-loops
    -fmerge-all-constants
    -DENABLE_OPTIMIZATIONS
    -DENABLE_PERFORMANCE_COUNTERS
)

# =============================================================================
# SOURCE FILES
# =============================================================================

# Modern code generator sources
set(MODERN_CG_SOURCES
    src/cg_modern.c
    src/cg_load_operations.c
    src/cg_arithmetic_operations.c
    src/cg_store_operations.c
    src/cg_logical_operations.c
    src/cg_comparison_operations.c
    src/cg_control_flow_operations.c
    src/cg_function_operations.c
    src/cg_memory_operations.c
    src/cg_meta_operations.c
)

# Modern code generator headers
set(MODERN_CG_HEADERS
    src/cg_modern.h
    src/oc.h
)

# Test sources
set(TEST_SOURCES
    src/test_cg_modern.c
)

# =============================================================================
# LIBRARIES
# =============================================================================

# Modern code generator library
add_library(bcpl_modern_cg STATIC
    ${MODERN_CG_SOURCES}
    ${MODERN_CG_HEADERS}
)

target_compile_options(bcpl_modern_cg PRIVATE
    ${MODERN_C_FLAGS}
    ${SECURITY_FLAGS}
    $<$<CONFIG:Debug>:${DEBUG_FLAGS}>
    $<$<CONFIG:Release>:${RELEASE_FLAGS}>
    $<$<CONFIG:RelWithDebInfo>:${RELEASE_FLAGS} -g>
)

# =============================================================================
# EXECUTABLES
# =============================================================================

# Test executable
add_executable(test_bcpl_modern
    ${TEST_SOURCES}
)

target_link_libraries(test_bcpl_modern
    bcpl_modern_cg
    m
)

target_compile_options(test_bcpl_modern PRIVATE
    ${MODERN_C_FLAGS}
    ${SECURITY_FLAGS}
    ${DEBUG_FLAGS}  # Always use debug flags for tests
)

# =============================================================================
# TESTING
# =============================================================================

enable_testing()

# Add the main test
add_test(
    NAME bcpl_modern_tests
    COMMAND test_bcpl_modern
)

# Set test properties
set_tests_properties(bcpl_modern_tests PROPERTIES
    TIMEOUT 30
    PASS_REGULAR_EXPRESSION "All tests passed!"
)
