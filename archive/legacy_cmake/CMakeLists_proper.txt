cmake_minimum_required(VERSION 3.20)

# =============================================================================
# PROJECT DEFINITION
# =============================================================================

project(BCPL_MultiArch
    VERSION 2025.1.0
    DESCRIPTION "Multi-Architecture BCPL Compiler with C23 Runtime"
    HOMEPAGE_URL "https://github.com/user/bcpl-compiler"
    LANGUAGES C CXX ASM
)

# =============================================================================
# CMAKE CONFIGURATION
# =============================================================================

# Modern CMake practices
set(CMAKE_C_STANDARD 23)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Enable compile_commands.json for analysis tools
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Use folders for organization in IDEs
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# =============================================================================
# MODULE PATH AND CONFIGURATION
# =============================================================================

# Add our custom CMake modules
list(APPEND CMAKE_MODULE_PATH 
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake"
)

# Include our configuration modules in the correct order
include(ArchitectureConfig)    # NEW: Proper architecture configuration
include(Options)               # Build options and tooling
include(PlatformConfig)        # Platform-specific configuration

# =============================================================================
# COMPILER VALIDATION
# =============================================================================

# Ensure we have a supported compiler
if(NOT CMAKE_C_COMPILER_ID MATCHES ".*Clang.*" AND NOT CMAKE_C_COMPILER_ID STREQUAL "GNU")
    message(FATAL_ERROR 
        "Unsupported compiler: ${CMAKE_C_COMPILER_ID}. "
        "BCPL requires Clang or GCC for C23 support."
    )
endif()

# Warn about old compilers
if(CMAKE_C_COMPILER_ID MATCHES ".*Clang.*")
    if(CMAKE_C_COMPILER_VERSION VERSION_LESS "13.0")
        message(WARNING "Clang ${CMAKE_C_COMPILER_VERSION} may have limited C23 support. Recommended: 13.0+")
    endif()
elseif(CMAKE_C_COMPILER_ID STREQUAL "GNU")
    if(CMAKE_C_COMPILER_VERSION VERSION_LESS "11.0")
        message(WARNING "GCC ${CMAKE_C_COMPILER_VERSION} may have limited C23 support. Recommended: 11.0+")
    endif()
endif()

# =============================================================================
# GLOBAL COMPILER AND LINKER FLAGS
# =============================================================================

# Base compiler flags for all targets
set(BCPL_BASE_C_FLAGS
    -Wall -Wextra -Wpedantic
    -Wno-unused-parameter      # BCPL generates many unused parameters
    -fno-strict-aliasing       # BCPL runtime needs this
)

# Architecture-specific flags (set by ArchitectureConfig.cmake)
list(APPEND BCPL_BASE_C_FLAGS ${BCPL_ARCH_FLAGS})
list(APPEND BCPL_BASE_C_FLAGS ${BCPL_ARCH_DEFINES})

# Add common defines
list(APPEND BCPL_BASE_C_FLAGS
    -DBCPL_VERSION_MAJOR=${PROJECT_VERSION_MAJOR}
    -DBCPL_VERSION_MINOR=${PROJECT_VERSION_MINOR}
    -DBCPL_VERSION_PATCH=${PROJECT_VERSION_PATCH}
    -DBCPL_TARGET_ARCH=\"${BCPL_TARGET_ARCHITECTURE}\"
    -DBCPL_ARCH_BITS=${BCPL_ARCH_BITS}
    -DBCPL_WORD_SIZE=${BCPL_ARCH_WORD_SIZE}
)

# Debug vs Release flags
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    list(APPEND BCPL_BASE_C_FLAGS -g3 -O0 -DDEBUG=1 -DBCPL_DEBUG=1)
elseif(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
    list(APPEND BCPL_BASE_C_FLAGS -g -O2 -DNDEBUG=1)
else()
    list(APPEND BCPL_BASE_C_FLAGS -O2 -DNDEBUG=1)
endif()

# =============================================================================
# SUBDIRECTORIES
# =============================================================================

# Add subdirectories in logical order
add_subdirectory(src)
add_subdirectory(tests)
add_subdirectory(docs)

# =============================================================================
# CUSTOM TARGETS
# =============================================================================

# Target to build all architectures (if multi-arch is enabled)
if(BCPL_ENABLE_MULTI_ARCH)
    add_custom_target(build-all-archs
        COMMENT "Building for all enabled architectures"
    )
    
    # Add dependencies for each enabled architecture
    foreach(arch arm64 x86_64 arm32 x86_32 x86_16)
        string(TOUPPER ${arch} ARCH_UPPER)
        if(BCPL_ENABLE_${ARCH_UPPER})
            add_custom_target(build-${arch}
                COMMAND ${CMAKE_COMMAND} 
                    --preset ${arch} 
                    -S ${CMAKE_SOURCE_DIR}
                COMMAND ${CMAKE_COMMAND} 
                    --build ${CMAKE_SOURCE_DIR}/build/${arch}
                COMMENT "Building for ${arch}"
                WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
            )
            add_dependencies(build-all-archs build-${arch})
        endif()
    endforeach()
endif()

# Universal binary target (macOS only)
if(APPLE AND BCPL_ENABLE_UNIVERSAL_BINARY)
    add_custom_target(universal-binary
        COMMENT "Creating Universal Binary"
    )
endif()

# Code quality targets
add_custom_target(format
    COMMAND find src tests -name "*.c" -o -name "*.h" | xargs clang-format -i
    COMMENT "Formatting code with clang-format"
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
)

add_custom_target(check-format
    COMMAND find src tests -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror
    COMMENT "Checking code format"
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
)

# =============================================================================
# INSTALLATION CONFIGURATION
# =============================================================================

# Installation directories
include(GNUInstallDirs)

# Install documentation
install(FILES 
    README.md
    README_MULTIARCH.md
    REFACTORING_SUMMARY.md
    COPYING
    COPYRIGHT
    DESTINATION ${CMAKE_INSTALL_DOCDIR}
)

# Install CMake configuration for find_package()
install(EXPORT BCPL-targets
    FILE BCPLTargets.cmake
    NAMESPACE BCPL::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/BCPL
)

# Generate and install CMake config files
include(CMakePackageConfigHelpers)

configure_package_config_file(
    cmake/BCPLConfig.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/BCPLConfig.cmake
    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/BCPL
)

write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/BCPLConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/BCPLConfig.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/BCPLConfigVersion.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/BCPL
)

# =============================================================================
# TESTING CONFIGURATION
# =============================================================================

# Enable testing
enable_testing()

# Add a test to ensure basic functionality
add_test(NAME basic_architecture_test
    COMMAND ${CMAKE_COMMAND} -E echo "Architecture: ${BCPL_TARGET_ARCHITECTURE}"
)

# =============================================================================
# PACKAGING
# =============================================================================

# CPack configuration for creating packages
set(CPACK_PACKAGE_NAME "bcpl-multiarch")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Multi-Architecture BCPL Compiler")
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_VENDOR "BCPL Project")
set(CPACK_PACKAGE_CONTACT "maintainer@bcpl-project.org")

set(CPACK_SOURCE_GENERATOR "TGZ")
set(CPACK_GENERATOR "TGZ")

# macOS specific packaging
if(APPLE)
    set(CPACK_GENERATOR "DragNDrop;TGZ")
endif()

# Linux specific packaging
if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(CPACK_GENERATOR "DEB;RPM;TGZ")
    set(CPACK_DEBIAN_PACKAGE_MAINTAINER "BCPL Project")
    set(CPACK_RPM_PACKAGE_LICENSE "MIT")
endif()

include(CPack)

# =============================================================================
# CONFIGURATION SUMMARY
# =============================================================================

message(STATUS "")
message(STATUS "=== BCPL Multi-Architecture Compiler Configuration ===")
message(STATUS "Version: ${PROJECT_VERSION}")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C Compiler: ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER_VERSION}")
message(STATUS "C Standard: C${CMAKE_C_STANDARD}")
message(STATUS "")
message(STATUS "Target Architecture: ${BCPL_TARGET_ARCHITECTURE}")
message(STATUS "Architecture Bits: ${BCPL_ARCH_BITS}")
message(STATUS "Word Size: ${BCPL_ARCH_WORD_SIZE} bytes")
message(STATUS "Features: ${BCPL_ARCH_FEATURES}")
message(STATUS "")
message(STATUS "Options:")
message(STATUS "  Multi-arch support: ${BCPL_ENABLE_MULTI_ARCH}")
message(STATUS "  Cross-compilation: ${BCPL_ENABLE_CROSS_COMPILE}")
message(STATUS "  Universal Binary: ${BCPL_ENABLE_UNIVERSAL_BINARY}")
message(STATUS "  Architecture optimization: ${BCPL_OPTIMIZE_FOR_ARCH}")
message(STATUS "  Native instructions: ${BCPL_USE_NATIVE_INSTRUCTIONS}")
message(STATUS "")
message(STATUS "Enabled Architectures:")
foreach(arch arm64 x86_64 arm32 x86_32 x86_16)
    string(TOUPPER ${arch} ARCH_UPPER)
    if(BCPL_ENABLE_${ARCH_UPPER})
        message(STATUS "  ✓ ${arch}")
    else()
        message(STATUS "  ✗ ${arch}")
    endif()
endforeach()
message(STATUS "")
if(DEFINED CMAKE_OSX_ARCHITECTURES)
    message(STATUS "macOS Architectures: ${CMAKE_OSX_ARCHITECTURES}")
    message(STATUS "")
endif()
message(STATUS "Install Prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "=======================================================")
message(STATUS "")
