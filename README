BCPLC README

This is an x86 (IA-32) port of the "classic" old BCPL compiler
(around 1980) from the Tripos Research Group at Cambridge University.

BCPL was a popular systems programming language during the 1960s
and 1970s, and is of great historical importance: about the time
of the birth of UNIX, BCPL directly inspired the computer language
B and thus had a very big influence on the development of C.

The compiler available here is very close to that featured in the
book, _BCPL: the language and its compiler_ by Martin Richards and
Colin Whitby-Stevens (Cambridge: Cambridge University Press, 1979).

As a real, working computer language implementation, that can be
studied, modified, and played with, the classic BCPL compiler has
a good deal to recommend it. The compiler frontend consists of
only about 2000 lines of BCPL code, and (as supplied here) compiles
to a static (fully-linked) x86 binary that is less than 36000 bytes
in size.

The present distribution supplies a compiler backend (OCODE to x86
code generator), together with peephole optimizer, and reasonably
extensive runtime support. A few revisions have been made to the
compiler frontend -- it looks for header files in a standard location,
for instance -- and  the runtime incorporates support for UNIX
command line arguments and error reporting. Some documentation
that formed part of the original BCPL distribution tape is also
included, as are a few utility programs.

Building
========

Before building you may install a comprehensive cross‑compilation
environment by running ``./setup.sh`` as root.  The script configures
package repositories for multiple architectures and installs toolchains
and emulators such as ``qemu`` to enable execution of foreign binaries,
including 16‑bit and 32‑bit x86 programs.  This is optional for a
straightforward native build but recommended when targeting older or
non‑native platforms.

To build the compiler from the top-level directory, run::

    ./scripts/makeall.sh
    ./scripts/makeall.sh install

The build now requires the Clang compiler with C23 support.  The
Makefile selects ``clang`` by default, so no extra arguments are
needed.  Use ``CC=gcc`` or another compiler only if it understands
C23.

Alternatively, you can build directly within ``src/``::

    make -C src
    make -C src install

The Makefiles and CMake build files default to a 64-bit runtime.
Specify ``BITS=32`` (or ``-DBITS=32`` when using CMake) to build
32-bit binaries.  Cross builds may also set ``CROSS_PREFIX``
(for example ``CROSS_PREFIX=i686-linux-gnu-``) to select alternate
assembler and linker commands.

After installation, verify the compiler by running::

    bcplc tools/cmpltest.bcpl

By default the runtime is 64 bit, so running under ``qemu-i386`` is no
longer required.  A 32-bit build remains available for older
environments via ``BITS=32`` or ``-DBITS=32``.

This should print::

    119 TESTS COMPLETED, 0 FAILURE(S)

Martin Richards, the originator of BCPL, has a home page at

    http://www.cl.cam.ac.uk/~mr10/

Richards has continued to develop BCPL, very much as though it were
still a living language, and has a large and complex distribution
of "present day" BCPL available, together with some archive materials.

The web page for this distribution is

    http://www.nordier.com/software/obcpl.html

Build

See INSTALL for detailed build instructions. Build the compiler with

    ./scripts/makeall.sh

and then install it, optionally overriding `PREFIX` to choose an
installation directory:

    ./scripts/makeall.sh install

The project also provides CMake files.  A typical out-of-tree build
looks like::

    cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr/local
    cmake --build build
    cmake --install build

The CMake build regenerates ``st.s`` using the freshly built code
generator by default.  Set ``-DBOOTSTRAP=OFF`` to skip this step.  The
``tools`` and ``docs`` targets may be built from the same build
directory.

Ensure the resulting `bcplc` driver is on your `PATH` (or supply a
`BC` variable pointing to it).  If the driver has not yet been
installed, the tests can be run with the freshly built copy in
``src/``.  The driver automatically searches its own directory for the
runtime components, so no installation is required::

    make -C tools BC=../src/bcplc test

After installation the shorter

    make test

will also compile and execute the "cmpltest" suite using the
64-bit runtime system.

Experimental Chicken Scheme Port
-------------------------------
An early experiment using [Chicken Scheme](https://call-cc.org/) lives in
the `ports/chicken/` directory.  It is not built by default and currently
contains only stubs.  Consult `ports/chicken/README.md` for more information.


Robert Nordier
www.nordier.com

Experimental Go Port
====================

The `experiments/bcpl-go` directory contains an in-progress rewrite of
selected components in Go.  The module targets Go 1.24 and currently
implements a basic version of the `bcplc` driver.  Tests can be run with

    go test ./experiments/bcpl-go

The port is incomplete but provides a starting point for further
translation and refactoring in Go.
