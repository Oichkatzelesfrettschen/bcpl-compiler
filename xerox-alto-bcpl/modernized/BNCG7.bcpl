// BNCG7.bcpl - BCPL Compiler -- More CG routines
// Copyright Xerox Corporation 1980

// last modified BY Butterfield, May 9, 1979  6:53 PM
// - CGothers LSTR: AND TABLE:, SWStackStrings - 5/9/79

GET "bncgx"

LET CGplus(Op) = valof
[ Op = Readop()

  IF Op eq STWQUAL % Op eq WQUAL DO
   [	LET n = Nval(ReadN())
	IF Op eq STWQUAL DO CGloadac(arg3)
	TEST type!arg1 eq NUMBER
	THEN [	loc!arg1 = Nval(loc!arg1 + n)
		CGsubscr(0)
	     ]
	OR TEST (n & #177600) eq 0 % (n &#177600) eq #177600
	THEN [	CGsubscr((n & #377) + #40000)
	     ]
	OR   [	CGadd()
		Push(NUMBER, 0, n)
		CGsubscr(0)
	     ]
	TEST Op eq STWQUAL THEN CGstnqual() OR CGnqual()
	RESULTIS -1
    ]

  IF type!arg1 eq NUMBER DO
  IF (loc!arg1 & #177600) eq 0 % (loc!arg1 & #177600) eq #177600 DO
   [	LET i = (loc!arg1 & #377) + #40000
	IF Op eq VECAP DO
	 [ Pop1()
	   CGsubscr(i)
	   CGloadac(arg1)
	   RESULTIS -1
	  ]
	IF Op eq STVECAP DO
	 [ Pop1()
	   CGloadac(arg3)
	   CGsubscr(i)
	   UNLESS type!arg2 eq AC DO CGloadac(arg2)
	   CGstore(loc!arg2, arg1)
	   Pop2()
	   RESULTIS -1
	  ]
	IF loc!arg1 eq 0 DO
	 [ Pop1()
	   RESULTIS Op
	  ]
	IF loc!arg1 eq 1 DO
	 [ CGloadac(arg2)
	   CGae(Iinc, loc!arg2, loc!arg2)
	   Pop1()
	   RESULTIS Op
	  ]
	IF loc!arg1 eq #177777 DO
	 [ Pop1()
	   CGloadac(arg1)
	   CGae(Ineg, loc!arg1, loc!arg1)
	   CGae(Inot, loc!arg1, loc!arg1)
	   RESULTIS Op
	  ]
    ]
  CGadd()
  RESULTIS Op
]

AND CGrel(Op) = valof
[ LET skip = 0
  LET ac1, ac2 = nil, nil
  IF type!arg1 eq NUMBER DO
	TEST loc!arg1 eq 0
	THEN skip = selecton Op INTO
	 [   CASE EQ:	Isne0
	     CASE NE:	Iseq0
	     CASE LS:	Isge0
	     CASE LE:	Isgr0
	     CASE GR:	Isle0
	     CASE GE:	Isls0
	     DEFAULT:	0
	  ]
	OR IF loc!arg1 eq #177777
	THEN skip = selecton Op INTO
	 [   CASE EQ:	Isne1
	     CASE NE:	Iseq1
	     DEFAULT:	0
	  ]
  Clearstack(SSP-3)
  CGloadac(arg2)
  ac2 = loc!arg2
  TEST skip eq 0
  THEN [
		LET flip = false
		skip =  selecton Op INTO
			   [
				CASE EQ:	Isne
				CASE NE:	Iseq
				CASE LS:	Isge
				CASE LE:	Isgr
				CASE GR:	Isle
				CASE GE:	Isls
				CASE ULS:	valof [ flip=true; RESULTIS Isuge ]
				CASE ULE:	valof [ flip=true; RESULTIS Isugr ]
				CASE UGR:	valof [ flip=true; RESULTIS Isule ]
				CASE UGE:	valof [ flip=true; RESULTIS Isuls ]
			   ]
         CGloadreg(arg1)
         ac1 = loc!arg1
         IF flip THEN [ flip = ac1; ac1 = ac2; ac2 = flip ]
        ]
  OR   [ ac1 = ac2
        ]
  Initstack(SSP-2)
  Op = Readop()
  TEST Op eq JT % Op eq JF
  THEN [ UNLESS Op eq JT DO skip = skip NEQV Iskpbit
	 CGtest(skip, ac1, ac2, ReadL())
	 RESULTIS -1
        ]
  OR   [ CGae(skip, ac1, ac2)
	 IF SWCode DO WriteSkip(Code!(PC-1))
	 CGae(Iset1+Iskpbit, ac2, ac2)
	 IF SWCode DO WriteS("// load TRUE AND skip")
	 CGae(Iset0        , ac2, ac2)
	 IF SWCode DO WriteS("// load FALSE")
	 Push(AC, 0, ac2)
	 RESULTIS Op
	]
]

AND CGcall(Op) = valof SWITCHON Op INTO
[

CASE RTCALL:
CASE FNCALL:
[ Clearstack(SSP-1)
  Initstack(SSP)
  Push(LOCAL, 0, SSP)
  RESULTIS -1

]

CASE PARAM:
[ LET i = ReadC()
  LET n = ReadC()
  LET l = ReadL()
  IF n le 3 RESULTIS -1
  IF i ls 3 RESULTIS -1
  CGstoreintemp(arg1)
  IF SWCode DO
    [ WriteS("// arg "); WriteN(i); WriteS(" of "); WriteN(n)
      IF l ne 0 DO [ WriteS(" TO "); WriteName(l) ]
    ]
  RESULTIS -1
]

CASE RTAP:
CASE FNAP:
[ LET n = ReadC()
  LET ssp = ReadN()
  UNLESS ssp + n + 2 eq SSP DO CGreport(-19)

  IF type!arg1 eq AC % type!arg1 eq XR DO
       CGstoreintempN(arg1, ssp)
  LET argf = VEC argsize-1
  Copyarg(arg1, argf)
  Pop1()

  IF n gr 3 DO
    [	FOR i = 3 TO n DO
	 [  UNLESS type!arg1 eq LOCAL & ref!arg1 eq 0 & loc!arg1 eq pos!arg1 DO
		CGreport(-18)
	    Pop1()
	 ]
	Push(NUMBER, 0, ssp + SSPoffset)
    ]
  IF n ge 3 DO
    [	CGstoreintempN(arg1, SSPtemp3)
	IF SWCode DO
	 TEST n eq 3
	 THEN	[ WriteS(" holds arg 3")
		]
	 OR	[ WriteS(" holds offset of arg list at TEMP")
		  WriteOct(ssp)
		]
	Pop1()
    ]
  TEST n ge 2
  THEN	[ CGload01()
	  Pop2()
	]
  OR IF n eq 1
  THEN	[ CGloadac0(arg1)
	  Pop1()
	]
  UNLESS type!arg1 eq LOCAL & ref!arg1 eq 0 & loc!arg1 eq pos!arg1 DO
		CGreport(-17)
  UNLESS ssp + 1 eq SSP DO
		CGreport(-16)
  Copyarg(argf, arg1)
  CGjumpandsave()
  IF SWCode DO
	[ WriteS(" "); WriteN(n)
	  WriteS(" arg"); UNLESS n eq 1 DO WW($s)
	]
  CGn(n)
  Pop1()
  IF Op eq FNAP DO Push(AC, 0, 0)
  RESULTIS -1
]
]

AND CGothers(Op) = valof
 SWITCHON Op INTO
[
CASE LN:
[ LET n = Nval(ReadN())
  Push(NUMBER, 0, n); SetName(ReadL())
  RESULTIS -1
]

CASE LC:
[ Push(NUMBER, 0, ReadN())
  RESULTIS -1
]

CASE TRUE:
[ Push(NUMBER, 0, #177777)
  RESULTIS -1
]

CASE FALSE:
[ Push(NUMBER, 0, 0)
  RESULTIS -1
]

CASE LP:
[ Push(LOCAL, 0, ReadN()); SetName(ReadL())
  RESULTIS -1
]

CASE LL:
[ Push(LABEL, 0, ReadL()); SetName(ReadL())
  RESULTIS -1
]

CASE LZ:
[ Push(COMMON, 0, ReadL()); SetName(ReadL())
  RESULTIS -1
]

CASE LLP:
[ LET n = Nval(ReadN())
  LET vname = ReadL()
  LET Op1 = Readop()
  UNLESS Op1 eq STWQUAL % Op1 eq WQUAL DO
    [ Push(NUMBER, 0, Nval(n + SSPoffset))
      CGloadac(arg1)
      CGae(Iadd, P, loc!arg1)
      IF SWCode DO
        [	WriteS("   (lv ")
    		WriteName(vname); WW($))
         ]
      RESULTIS Op1
    ]
  IF Op1 eq STWQUAL DO CGloadac(arg1)
  LET w = Nval(ReadN())
  LET l = Nval(n + SSPoffset + w)
  TEST w eq 0
  THEN [ Push(LOCAL, 0, n)
	 SetName(vname)
	]
  OR   [ Push(NUMBER, 0, l)
	 CGloadxr(arg1)
	 CGae(Iadd, P, X)
	 ref!arg1 = #40000
	 IF SWCode DO
		[ WriteS("   lv "); WriteName(vname)
		  WW($+); WriteOct(w); WW($))
		]
	]
  TEST Op1 eq STWQUAL THEN CGstnqual() OR CGnqual()
  RESULTIS -1
]
    
CASE LLVP:
[ Push(NUMBER, 0, Nval(ReadN() + MaxSSP + SSPoffset))
  CGloadac(arg1)
  CGae(Iadd, P, loc!arg1)
  RESULTIS -1
]

CASE LLL:
CASE LLZ:
[ LET l = ReadL()
  LET vname = ReadL()
  LET Op1 = Readop()
  UNLESS Op1 eq STWQUAL % Op1 eq WQUAL DO
   [	Push((Op eq LLL ? LVLABEL, LVCOMMON), 0, l)
	SetName(vname)
	RESULTIS Op1
   ]
  IF Op1 eq STWQUAL DO CGloadac(arg1)
  LET w = Nval(ReadN())
  TEST w eq 0
  THEN [ Push((Op eq LLL ? LABEL, COMMON), 0, l)
	 SetName(vname)
	]
  OR   [ Push((Op eq LLL ? LVLABEL, LVCOMMON), 0, l)
	 SetName(vname)
	 Push(NUMBER, 0, w)
	 CGsubscr(0)
	]
  TEST Op1 eq STWQUAL THEN CGstnqual() OR CGnqual()
  RESULTIS -1
]

CASE LSTR:
[ LET s = VEC 128
  LET n = ReadC()
  s!0 = n LSHIFT 8
  LET i, j = 0, 1
  [ IF j gr n BREAK
    s!i = s!i + ReadC()
    j = j + 1
    IF j gr n BREAK
    i = i + 1
    s!i = ReadC() LSHIFT 8
    j = j + 1
   ] REPEAT
  CGcheckconstants(i+4)
  TEST SWStackStrings ne 0
     ifso
        [
        CG(Istring); CGn(SWStackStrings);
        IF NOT PassTwo THEN SWStackStrings = PC - 1;
        ]
     ifnot CG(Ijsr + (R LSHIFT 8) + Bval(i+2))
  IF SWCode DO WriteS("// load X with string pointer")
  FOR j = 0 TO i DO CGn(s!j)
  Op = Readop()
  SWITCHON Op INTO
    [	CASE SP:
	CASE SL:
	CASE SZ:
		Push(AC, 0, X)
		RESULTIS Op
    ]
  LET ac = freeac()
  CGae(Imov, X, ac)
  Push(AC, 0, ac)
  RESULTIS Op
]

CASE TABLE:
[ LET n = ReadN()
  IF n ge #177 DO
  [ Push(NUMBER, 0, n+2)
    CGloadac(arg1)
  ]
  CGcheckconstants(n+4)
  TEST SWStackStrings ne 0
     ifso
        [
        CG(Istring); CG(SWStackStrings); CGn(n);
        IF NOT PassTwo THEN SWStackStrings = PC - 2 + Codelimit;
        ]
     ifnot TEST n ls #177
        ifso CG(Ijsr + (R LSHIFT 8) + Bval(n+1))
        ifnot
           [
           CG(Ijsr + (R LSHIFT 8) + 1)
           CGae(Iadd, loc!arg1, X)
           CG(Ijsr + (X LSHIFT 8) + 0)
           Pop1()
           ]
  IF SWCode DO WriteS("// load X with TABLE pointer")
  FOR j = 0 TO n-1 DO CGn(Nval(ReadN()))
  Op = Readop()
  SWITCHON Op INTO
    [	CASE SP:
	CASE SL:
	CASE SZ:
		Push(AC, 0, X)
		RESULTIS Op
    ]
  LET ac = freeac()
  CGae(Imov, X, ac)
  Push(AC, 0, ac)
  RESULTIS Op
]

CASE RV:
[ CGrv()
  RESULTIS -1
]

CASE LVRV:
[ CGloadac0(arg1)
  IF SWAlto RESULTIS -1
  CG(Igetlv)
  IF SWCode DO WriteS("   ( LV)")
  RESULTIS -1
]

CASE VECAP:
[ CGsubscr(0)
  IF type!arg1 eq XR DO CGloadac(arg1)
  RESULTIS -1
]

CASE NEWLOCAL:
[ LET n = ReadL()
  IF type!arg1 eq LOCAL & ref!arg1 eq 0 & loc!arg1 eq pos!arg1 RESULTIS -1
  Push(LOCAL, 0, pos!arg1); SetName(n)
  CGloadreg(arg2)
  CGstore(loc!arg2, arg1)
  Pop1()
  Setarg(arg1, LOCAL, 0, pos!arg1, pos!arg1, n)
  RESULTIS -1
]

CASE SP:
[ Push(LOCAL, 0, ReadN()); SetName(ReadL())
  CGloadreg(arg2)
  CGstore(loc!arg2, arg1)
  Pop2()
  RESULTIS -1
]

CASE SL:
[ Push(LABEL, 0, ReadL()); SetName(ReadL())
  CGloadreg(arg2)
  CGstore(loc!arg2, arg1)
  Pop2()
  RESULTIS -1
]

CASE SZ:
[ Push(COMMON, 0, ReadL()); SetName(ReadL())
  CGloadreg(arg2)
  CGstore(loc!arg2, arg1)
  Pop2()
  RESULTIS -1
]

CASE STIND:
[ CGloadac(arg2)
  CGrv()
  CGstore(loc!arg2, arg1)
  Pop2()
  RESULTIS -1
]

CASE STVECAP:
[ CGloadac(arg3)
  CGsubscr(0)
  UNLESS type!arg2 eq AC DO CGloadac(arg2)
  CGstore(loc!arg2, arg1)
  Pop2()
  RESULTIS -1
]

DEFAULT:	CGreport(-8)

]
  