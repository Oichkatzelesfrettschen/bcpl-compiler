// BTRN2.bcpl - BCPL Compiler -- Trans, Part 2.
// Copyright Xerox Corporation 1980
//  Last modified on Fri 27 Oct 72 0114.17 BY  jec.

//	TransLET	Translate the left son of a LET node.
//	*Transdef1	Load the right sides of definitions other than VALDEFs.
//	*TD1		DO the work FOR Transdef1

//	*DeclNames	Declare names.
//	*DeclDyn		Declare dynamic variables.

//	ListLength	RETURN the length of a list.
//  local TO this file.

GET "btrnx"		//  Declarations FOR Trans.

//  Translate the left son of a LET node.
LET TransLET(x) BE
 [  LET S, V = SSP, VecSSP
    AND SB = SwitchBlock
    SwitchBlock = false
    LET Def = H2!x   //  The definition.
    WHILE H1!Def eq LINE DO [ Curline = H2!Def
			       IF SWList DO [ IF SWOcode DO WW($*n); WriteLine(Curline) ]
			       Out2(PLINE, Curline); Def = H3!Def ]
    DeclNames(Def)
    SSP = S
    Transdef1(Def)
    Out2(STACK, SSP)
    Out1(STORE)
    Trans(H3!x)
    SSP, VecSSP = S, V
    SwitchBlock = SB
    Out2(STACK, SSP)
    RETURN
  ]


AND Transdef1(x) BE   //  Load right side(s) of a definition.  Called from TransLET.
 [  IF x eq 0 RETURN
    WHILE H1!x eq LINE DO [ Curline = H2!x
			    IF SWList DO [ IF SWOcode DO WW($*n); WriteLine(Curline) ]
			    Out2(PLINE, Curline); x = H3!x; IF x eq 0 RETURN ]
    SWITCHON H1!x INTO
     [  CASE AND:
	    Transdef1(H2!x)
	    Transdef1(H3!x)
	    RETURN

	CASE VALDEF:
	 [  LET S = SSP
	    TD1(H2!x, H3!x)
	    LET n = (SSP - S) - H4!x   //  Difference between number of names AND of values.
	    IF n eq 0 RETURN   //  All is well IF they are the same.
	    TRNreport(3)   //  Oops.
	    RETURN
	  ]

	CASE FNDEF: CASE RTDEF:   //  Function OR routine definition.
	 [  LET L = nil
	    UNLESS FrameLevel eq 0 DO [ L = Nextparam()
				        Compjump(L) ]    //  Compile jump round body.
	    FrameLevel = FrameLevel + 1
	    LET S, V, MS, MV = SSP, VecSSP, MaxSSP, MaxVecSSP
	    LET VB, SB, RB = ValofBlock, SwitchBlock, RepeatBlock
	    ValofBlock, SwitchBlock, RepeatBlock = false, false, false
	    LET EL = Endcaselabel
	    Endcaselabel = 0
	    LET RBody = RoutineBody
	    RoutineBody = H1!x eq RTDEF   //  Are we in a routine body?
	    //  Compile the entry point.  H5!x was set in DeclNames TO the label of this routine.
	    Compentry(H5!x, H6!x)  
	    LET EntryPos = Position(OcodeStream)
	    OutN(0); OutN(0)
	    SSP = Savespacesize   //  Start a new stack frame.
	    VecSSP = 0
	    MaxSSP = SSP
	    MaxVecSSP = VecSSP

	    DeclDyn(H3!x)   //  Declare the formal parameter list.

	    //  Compile the body of the thing.
	    Out2(SAVE, SSP)
	    IF H7!x ne 0 DO
		[ DeclDyn(H7!x)
		  LET n = H7!x
		  Out1(NUMARGS); OutL(H1!n & NameMask)
		]
	    TEST  RoutineBody
	    ifso
	     [  LET S = SSP
		Trans(H4!x)
		UNLESS SSP eq S DO TRNreport(-3)
		Out1(RTRN)
	      ]
	    ifnot 
	     [ 	LET S = SSP
		Load(H4!x)
		UNLESS SSP eq S + 1 DO TRNreport(-4)
		Out1(FNRN)
	       ]

	    Out1(ENDFRAME)
	    LET EndPos = Position(OcodeStream)
	    Reposition(OcodeStream, EntryPos)
	    OutN(MaxSSP); OutN(MaxVecSSP)
	    Reposition(OcodeStream, EndPos)

	    SSP, VecSSP, MaxSSP, MaxVecSSP = S, V, MS, MV
	    Out2(STACK, SSP)

	    FrameLevel = FrameLevel - 1
	    UNLESS FrameLevel eq 0 DO [ Complab(L) ]   //  The jump around the body.
	    ValofBlock, RepeatBlock, SwitchBlock = VB, RB, SB
	    Endcaselabel = EL
	    RoutineBody = RBody
	    RETURN
	  ]

	DEFAULT:
	    RETURN
      ]
  ]


//  TD1 is called BY
//	Transdef, CASE VALDEF, TO process the right side.
//  In general, it loads the relevant value(s) INTO the stack, but VEC"s are special.
//  FOR these only the label is loaded AND VecSSP is incremented BY the space needed.

AND TD1(n, x) BE
 [  IF (H1!n & TypeMask) ne 0 DO n = H1!n & NameMask
    SWITCHON ( (x & NameBit) eq 0 ? H1!x, 0)  INTO
     [  DEFAULT:
	    Load(x)
	    Out1(NEWLOCAL); OutL(n)
	    RETURN
	CASE VEC:
	    Out2(LLVP, VecSSP)
	    Out1(NEWLOCAL); OutL(n)
	    SSP = SSP + 1; CheckSSP()
	    VecSSP = VecSSP + 1 + GetConst(H2+x); CheckVecSSP()
	    RETURN
	CASE COMMA:
	    TD1((n eq 0 ? 0, H2!n), H2!x)
	    TD1((n eq 0 ? 0, H3!n), H3!x)
	    RETURN
      ]
  ]


//  Declare the names in a set of declarations.  Dynamic names (CASE VALDEF) are processed BY
//  DeclDyn, which steps SSP BY the number of names declared.  Names of functions AND routines
//  are declared as STATIC items BY DeclStat.  Leave symbol TABLE offset in FNDEF AND RTDEF nodes.
//  This routine is called only from TransLET.

AND DeclNames(x) BE
 [  IF x  eq  0 RETURN
    IF H1!x eq LINE DO [ Curline = H2!x; Out2(LINE, Curline); x = H3!x ]
    SWITCHON H1!x INTO
     [  CASE AND:
	    DeclNames(H2!x)
	    DeclNames(H3!x)
	    RETURN

	CASE VALDEF:
	 [  LET S = SSP
	    DeclDyn(H2!x)
	    H4!x = SSP - S   //  Record number of names declared.
	    RETURN
	  ]

	CASE RTDEF:
	CASE FNDEF: 
	 [  RETURN
	  ]

	DEFAULT:
	    TRNreport(-5)   //  Compiler error.
      ]
  ]


//  Declare 1 OR more dynamic names, in a formal parameter list OR on the left side of a
//  VALDEF.  Step SSP as appropriate.  This routine is called from
//	DeclNames, CASE VALDEF, TO process the names being declared.
//	Transdef1, CASE FNDEF AND RTDEF TO process the formal parameters.

AND DeclDyn(x) BE
 [  IF x eq 0 RETURN
    IF (H1!x & TypeMask) ne 0 DO
     [  H2!x = SSP
        SSP = SSP + 1; CheckSSP()
        RETURN
      ]
    SWITCHON H1!x INTO
     [  CASE NIL:
	    SSP = SSP + 1; CheckSSP()
	    RETURN

	CASE COMMA:
	    DeclDyn(H2!x)
	    DeclDyn(H3!x)
	    RETURN

	DEFAULT:
	    TRNreport(-6)   //  Compiler error.
	    RETURN
      ]
  ]

